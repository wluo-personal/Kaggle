0: ip_channel:  count
1: ip_device_os_app: mean
2: ip_day_hour_var
3: ip_app_skew()
4: ip_app_os: nunique()
5: ip_device: cumcount()
#####################################################################
processing: app
train index length is: 571
test index length is: 417
intersection index length is: 382
processing: device
train index length is: 2598
test index length is: 1985
intersection index length is: 1557
processing: os
train index length is: 526
test index length is: 395
intersection index length is: 322
processing: channel
train index length is: 318
test index length is: 178
intersection index length is: 172
#########################################################################

next_click: ip_app_device_os

ip_tcount:   ip day hour
ip_tchan_count: ip day channel
ip_app_count: ip app
ip_app_os_count: ip app os 
ip_app_os_var: ip app os var
ip_app_channel_var_day: ip app channel  var
ip_app_channel_mean_hour: ip, app, channel




feature_val = ['ip_app_os_var_hour', 'ip_app_channel_var_day']


############################################
_features_matrixregV1


best result now
feature_count =  [
                    'ip_day_hour_count',
                    'ip_os_day_hour_count',
                    'ip_app_day_hour_count',
                    'ip_app_os_day_hour_count',
                    'app_day_hour_count',
                    'ip_device_os_count',
                    'ip_app_device_os_count']

feature_mean = ['ip_device_os_mean',
                'ip_app_device_os_mean']

feature_reversemean = []

feature_time2nextclick = ['ip_device_os_time2nextclick',
                            'ip_app_device_os_time2nextclick']

feature_time2previousclick = ['ip_device_os_time2previousclick', 
                                'ip_app_device_os_time2previousclick']
    
    
feature_countfromfuture = ['ip_device_os_countfromfuture',
                            'ip_app_device_os_countfromfuture']

feature_countfrompast = ['ip_device_os_countfrompast',
                            'ip_app_device_os_countfrompast']
    
feature_lasttimediff =  ['ip_device_os_lasttimediff',
                             'ip_app_device_os_lasttimediff']

feature_matrixfac = [ 'matrixFact_user_iposdeviceapp_item_app']

feature_var = [] # best result need to add var
feature_regression = ['ip_device_os_regression', 'ip_app_device_os_regression']
                         

feature_ori = ['app', 'channel', 'device', 'os', 'hour']


############################################
_features_matrixregV2

feature_count =  [
                    'ip_day_hour_count',
                    'ip_os_day_hour_count',
                    'ip_app_day_hour_count',
                    'ip_app_os_day_hour_count',
                    'app_day_hour_count',
                    'ip_device_os_count',
                    'ip_app_device_os_count']

feature_mean = ['ip_device_os_mean',
                'ip_app_device_os_mean', 'ip_app_device_mean', 'app_device_os_mean']

# feature_reversemean = ['ip_device_os_reversemean',
#                 'ip_app_device_os_reversemean', 'ip_reversemean']
feature_reversemean = []

feature_time2nextclick = ['ip_device_os_time2nextclick',
                            'ip_app_device_os_time2nextclick', 'ip_app_device_time2nextclick', 'app_device_os_time2nextclick']

feature_time2previousclick = ['ip_device_os_time2previousclick', 
                                'ip_app_device_os_time2previousclick', 'ip_app_device_time2previousclick', 'app_device_os_time2previousclick']
    
    
feature_countfromfuture = ['ip_device_os_countfromfuture',
                            'ip_app_device_os_countfromfuture', 'ip_app_device_countfromfuture', 'app_device_os_countfromfuture']

feature_countfrompast = ['ip_device_os_countfrompast',
                            'ip_app_device_os_countfrompast', 'ip_app_device_countfrompast', 'app_device_os_countfrompast']
    
feature_lasttimediff =  ['ip_device_os_lasttimediff',
                             'ip_app_device_os_lasttimediff', 'ip_app_device_lasttimediff', 'app_device_os_lasttimediff']

# feature_matrixfac = ['matrixFact_user_iposdeviceapp_item_device', 
#                      'matrixFact_user_iposdeviceapp_item_app','matrixFact_user_iposdeviceapp_item_channel']
feature_matrixfac = [ 'matrixFact_user_iposdeviceapp_item_app', 'matrixFact_user_ip_item_appdeviceos']



feature_var = ['ip_app_os_var_hour', 'ip_app_channel_var_day']
feature_var = [] # best result need to add var
feature_regression = ['ip_device_os_regression', 'ip_app_device_os_regression', 'ip_app_device_regression', 'app_device_os_regression']
                         

feature_ori = ['app', 'channel', 'device', 'os', 'hour']




1.
######################################## 0.9797
day 7 : 0.984731
day 8 : 0.985181
day 9 : 0.981595


channel                                   1663
os                                         783
app                                        596
ip_app_device_os_time2nextclick            578
matrixFact_user_ip_item_appdeviceos        369
matrixFact_user_iposdeviceapp_item_app     331
ip_day_hour_count                          328
ip_device_os_count                         235
ip_app_device_os_count                     209
ip_app_device_os_lasttimediff              208
hour                                       168
ip_device_os_lasttimediff                  149
ip_app_device_time2nextclick               139
ip_app_device_lasttimediff                 138
ip_app_device_time2previousclick           135
ip_app_device_countfrompast                134
ip_device_os_mean                          129
ip_app_device_countfromfuture              121
app_day_hour_count                         115
ip_app_os_day_hour_count                   115
ip_app_device_os_countfromfuture           107
ip_app_device_mean                         104
ip_device_os_regression                    103
ip_app_device_os_time2previousclick         99
ip_app_day_hour_count                       98
ip_device_os_countfrompast                  97
ip_os_day_hour_count                        96
ip_app_device_regression                    95
ip_device_os_countfromfuture                94
ip_device_os_time2previousclick             82
ip_device_os_time2nextclick                 82
device                                      71
ip_app_device_os_countfrompast              61
ip_app_device_os_mean                       20
ip_app_device_os_regression                  8

params = {
        'objective': 'binary',
        'boosting': 'gbdt',
        'num_rounds': 2000,
        'learning_rate': 0.1,
        'num_leaves': 61,
        'num_threads': 4, # best speed: set to number of real cpu cores, which is vCPU/2
        'device': 'cpu',
        'max_depth': -1, # no limit. This is used to deal with over-fitting when #data is small.
        'min_data_in_leaf': 390,  #minimal number of data in one leaf. Can be used to deal with over-fitting
        'feature_fraction': 0.7, #For example, if set to 0.8, will select 80% features before training each tree.  speed up training / deal with over-fitting
        'feature_fraction_seed': 1,
        'early_stopping_round':100,
        'bagging_fraction': 0.7, #Randomly select part of data without resampling
        'bagging_freq': 1, #frequency for bagging, 0 means disable bagging. k means will perform bagging at every k iteration. to enable bagging, bagging_fraction should be set as well
        'bagging_seed': 1,
        'verbose': 0,
        'scale_pos_weight': 400,
        'metric' : [ 'auc']
    }
    
    
    
2. no channel
######################################## 0.9790
day 7 : 0.984617
day 8 : 0.984834
day 9 : 0.9815


app                                       873
os                                        858
ip_app_device_os_time2nextclick           592
matrixFact_user_ip_item_appdeviceos       436
matrixFact_user_iposdeviceapp_item_app    369
ip_day_hour_count                         363
ip_device_os_count                        353
ip_app_device_os_lasttimediff             231
ip_app_device_os_count                    228
ip_app_device_time2nextclick              194
ip_app_device_lasttimediff                191
ip_device_os_lasttimediff                 190
app_day_hour_count                        186
ip_app_device_countfromfuture             169
ip_app_device_countfrompast               167
hour                                      163
ip_app_device_time2previousclick          156
ip_os_day_hour_count                      155
ip_device_os_countfromfuture              141
ip_device_os_countfrompast                136
ip_app_device_mean                        133
ip_device_os_mean                         132
ip_app_os_day_hour_count                  127
ip_device_os_regression                   119
ip_app_device_os_time2previousclick       116
ip_app_device_regression                  114
ip_device_os_time2nextclick               104
ip_app_device_os_countfromfuture          100
ip_device_os_time2previousclick            97
device                                     91
ip_app_day_hour_count                      80
ip_app_device_os_countfrompast             79
ip_app_device_os_mean                      34
ip_app_device_os_regression                23

params = {
        'objective': 'binary',
        'boosting': 'gbdt',
        'num_rounds': 2000,
        'learning_rate': 0.1,
        'num_leaves': 61,
        'num_threads': 4, # best speed: set to number of real cpu cores, which is vCPU/2
        'device': 'cpu',
        'max_depth': -1, # no limit. This is used to deal with over-fitting when #data is small.
        'min_data_in_leaf': 390,  #minimal number of data in one leaf. Can be used to deal with over-fitting
        'feature_fraction': 0.7, #For example, if set to 0.8, will select 80% features before training each tree.  speed up training / deal with over-fitting
        'feature_fraction_seed': 1,
        'early_stopping_round':100,
        'bagging_fraction': 0.7, #Randomly select part of data without resampling
        'bagging_freq': 1, #frequency for bagging, 0 means disable bagging. k means will perform bagging at every k iteration. to enable bagging, bagging_fraction should be set as well
        'bagging_seed': 1,
        'verbose': 0,
        'scale_pos_weight': 400,
        'metric' : [ 'auc']
    }
    
    
3. no 'ip_day_hour_count', no 'app_day_hour_count'
######################################## 0.9790
day 7 : 0.984446
day 8 : 0.985073
day 9 : 0.9815


app                                       873
os                                        858
ip_app_device_os_time2nextclick           592
matrixFact_user_ip_item_appdeviceos       436
matrixFact_user_iposdeviceapp_item_app    369
ip_day_hour_count                         363
ip_device_os_count                        353
ip_app_device_os_lasttimediff             231
ip_app_device_os_count                    228
ip_app_device_time2nextclick              194
ip_app_device_lasttimediff                191
ip_device_os_lasttimediff                 190
app_day_hour_count                        186
ip_app_device_countfromfuture             169
ip_app_device_countfrompast               167
hour                                      163
ip_app_device_time2previousclick          156
ip_os_day_hour_count                      155
ip_device_os_countfromfuture              141
ip_device_os_countfrompast                136
ip_app_device_mean                        133
ip_device_os_mean                         132
ip_app_os_day_hour_count                  127
ip_device_os_regression                   119
ip_app_device_os_time2previousclick       116
ip_app_device_regression                  114
ip_device_os_time2nextclick               104
ip_app_device_os_countfromfuture          100
ip_device_os_time2previousclick            97
device                                     91
ip_app_day_hour_count                      80
ip_app_device_os_countfrompast             79
ip_app_device_os_mean                      34
ip_app_device_os_regression                23

params = {
        'objective': 'binary',
        'boosting': 'gbdt',
        'num_rounds': 2000,
        'learning_rate': 0.1,
        'num_leaves': 61,
        'num_threads': 4, # best speed: set to number of real cpu cores, which is vCPU/2
        'device': 'cpu',
        'max_depth': -1, # no limit. This is used to deal with over-fitting when #data is small.
        'min_data_in_leaf': 390,  #minimal number of data in one leaf. Can be used to deal with over-fitting
        'feature_fraction': 0.7, #For example, if set to 0.8, will select 80% features before training each tree.  speed up training / deal with over-fitting
        'feature_fraction_seed': 1,
        'early_stopping_round':100,
        'bagging_fraction': 0.7, #Randomly select part of data without resampling
        'bagging_freq': 1, #frequency for bagging, 0 means disable bagging. k means will perform bagging at every k iteration. to enable bagging, bagging_fraction should be set as well
        'bagging_seed': 1,
        'verbose': 0,
        'scale_pos_weight': 400,
        'metric' : [ 'auc']
    }